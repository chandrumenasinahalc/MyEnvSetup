" python indentation settings
function! SetPythonIndent()
     set tabstop=4
     set softtabstop=4
     set shiftwidth=4
     set textwidth=0
     set expandtab
     set autoindent
     set fileformat=unix
endfunction

" C/C++ indentation settings
function! SetCCIndent()
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set textwidth=0
    set expandtab
    set fileformat=unix
    Format
endfunction

" function to search in range
function! RangeSearch(direction)
	call inputsave()
	let g:srchstr = input(a:direction)
	call inputrestore()
	if strlen(g:srchstr) > 0
		let g:srchstr = g:srchstr.
					\ '\%>'.(line("'<")-1).'l'.
					\ '\%<'.(line("'>")+1).'l'
	else
		let g:srchstr = ''
	endif
endfunction

" Colors variables
function! Colors()
    let s:brown = "905532"
    let s:aqua =  "3AFFDB"
    let s:blue = "689FB6"
    let s:darkBlue = "44788E"
    let s:purple = "834F79"
    let s:lightPurple = "834F79"
    let s:red = "AE403F"
    let s:beige = "F5C06F"
    let s:yellow = "F09F17"
    let s:orange = "D4843E"
    let s:darkOrange = "F16529"
    let s:pink = "CB6F6F"
    let s:salmon = "EE6E73"
    let s:green = "8FAA54"
    let s:lightGreen = "31B53E"
    let s:white = "FFFFFF"
    let s:rspec_red = 'FE405F'
    let s:git_orange = 'F54D27'
endfunction

" Global settings
function! GlobalSettings()
    set ts=4
    set sw=4
    set tw=78
    set cindent  "always set indentation on "
    set comments=sl:/*,mb:**,elx:*
    :set ruler
    set hlsearch
    set expandtab
    set diffopt+=iwhite
    syntax on
    "set colorcolumn=80
    highlight ColorColumn ctermbg=1
    set backspace=2
    set is
    set ai
    set history=10000
    :hi Search cterm=NONE ctermfg=grey ctermbg=blue
    "Vundle plugin manager config start
    set nocompatible              " be iMproved, required
    filetype off                  " required
    set laststatus=2
    set wildmenu
    set wildmode=list:longest,full
    if !has('nvim')
        set ttymouse=xterm2
	    tnoremap <Esc> <C-\><C-n>
	    tnoremap <C-v><Esc> <Esc>
    endif
    highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
    set relativenumber
    let @g=':vimgrep // % | copen'
    "set foldmethod=syntax
    set autoindent
    set shell=/bin/bash
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1

    " Or if you have Neovim >= 0.1.5
    if (has("termguicolors"))
        set termguicolors
    endif

    " Theme
    syntax enable
    colorscheme OceanicNext
    set backspace=0
    " pipe system and vim clipboard
    set clipboard+=unnamedplus
    set showcmd
    set ttimeoutlen=50
    set inccommand=nosplit
    " autocommand for pertty the json using python json.tool
    "au BufWritePost *.json silent %!python -mjson.tool
    set t_Co=256
    set t_ut=
    "let g:codedark_conservative = 1
    colorscheme codedark
    "create new empty file
    set hidden
    let g:highlightedyank_highlight_duration = 10000
    highlight HighlightedyankRegion cterm=reverse gui=reverse
    set signcolumn=no
endfunction


"Toggle zoom
function! s:ZoomToggle() abort
	if exists('t:zoomed') && t:zoomed
		execute t:zoom_winrestcmd
		let t:zoomed = 0
	else
		let t:zoom_winrestcmd = winrestcmd()
		resize
		vertical resize
		let t:zoomed = 1
	endif
endfunction
 
" Toggle mouse enable
" copied from http://unix.stackexchange.com/questions/156707/how-to-toggle-mouse-support-in-vim
function! ToggleMouse()
	" check if mouse is enabled
	if &mouse == 'a'
		" disable mouse
		set mouse=
	else
		" enable mouse everywhere
		set mouse=a
	endif
endfunc
 
" Nerd tree configs
function! AddNerdTreeConf()
    let g:NERDTreeFileExtensionHighlightFullName = 1
    let g:NERDTreeExactMatchHighlightFullName = 1
    let g:NERDTreePatternMatchHighlightFullName = 1
    let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
    let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
    let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
    let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color of css files to blue

    let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
    let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

    let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
    let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with
    " enable line numbers
    let NERDTreeShowLineNumbers=1
    " make sure relative line numbers are used
    "autocmd FileType nerdtree setlocal relativenumber
    let g:NERDTreeIndicatorMapCustom = {
                \ "Modified"  : "✹",
                \ "Staged"    : "✚",
                \ "Untracked" : "✭",
                \ "Renamed"   : "➜",
                \ "Unmerged"  : "═",
                \ "Deleted"   : "✖",
                \ "Dirty"     : "✗",
                \ "Clean"     : "✔︎",
                \ 'Ignored'   : '☒',
                \ "Unknown"   : "?"
                \ }
endfunction

" fugitive plugins key mapings
function! GitMapings()
    noremap <Leader>gd :Gdiff<cr>
    noremap <Leader>gb :Gblame<cr>
    noremap <Leader>ga :FzfPreviewGitActionsRpc<cr>
endfunction

" vim-go plugin preferences
function! VimGoPluginSettings()
    "let g:go_guru_scope = ["github.com/...","golangorg/...","mypractice","..."]
    let g:go_list_type = "quickfix"
    :au FileType go map <localleader>r <Plug>(go-run)
    :au FileType go map <localleader>b <Plug>(go-build)
    :au FileType go map <localleader>i <Plug>(go-imports)
    :au FileType go map <localleader>d <Plug>(go-describe)
    :au FileType go map <localleader>dv <Plug>(go-def-vertical)
    :au FileType go map <localleader>dh <Plug>(go-def-split)
    let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
    let g:go_auto_type_info = 1
    let g:go_fmt_command = "goimports"
    "let g:go_metalinter_autosave = 1
    "let g:go_metalinter_autosave_enabled = ['vet', 'golint', 'errcheck']
    "let g:go_metalinter_autosave_enabled = ['vet', 'golint', 'errcheck', 'varcheck', 'aligncheck', 'ineffassign', 'deadcode','gosimple', 'staticcheck']
    let g:go_metalinter_autosave = 1
    let g:go_metalinter_command = "golangci-lint"
    let g:go_list_type = 'quickfix'

    ", 'varcheck']
    let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck', 'varcheck', 'aligncheck', 'ineffassign', 'deadcode','gosimple', 'staticcheck']
    "let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck' ]
    let g:go_metalinter_deadline = '10s'
    let g:go_metalinter_command = "--exclude=test"
    let g:go_highlight_functions = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_term_enabled = 1
    let g:go_term_mode = "split"
    let g:go_term_height = 13
    let g:go_highlight_build_constraints = 1
    "let g:go_fmt_fail_silently = 1
    let g:go_highlight_function_calls=1
    let g:go_highlight_functions = 1
    let g:go_highlight_variable_assignments=1
    let g:go_highlight_variable_declarations=1
    "let g:go_highlight_function_parameters=1
    let g:go_def_mode='gopls'
    let g:go_info_mode='gopls'
endfunction


" YouCompleteMe preferences
function! YCMSettings()
    let g:ycm_semantic_triggers =  {
                \   'c' : ['->', '.'],
                \   'go' : ['.'],
                \   'objc' : ['->', '.'],
                \   'cpp,objcpp' : ['->', '.', '::'],
                \   'perl' : ['->'],
                \   'php' : ['->', '::'],
                \   'cs,java,javascript,d,vim,ruby,python,perl6,scala,vb,elixir,go' : ['.'],
                \   'lua' : ['.', ':'],
                \   'erlang' : [':'],
                \ }
    "let g:ycm_global_ycm_extra_conf = "/home/vuser/repo/2xx/visp/coco/.ycm_extra_conf.py"
    "" turn on completion in comments
    "let g:ycm_complete_in_comments=1
    "" load ycm conf by default
    "let g:ycm_confirm_extra_conf=0
    "" turn on tag completion
    "let g:ycm_collect_identifiers_from_tags_files=1
    "" only show completion as a list instead of a sub-window
    "set completeopt+=preview
    "" start completion from the first character
    "let g:ycm_min_num_of_chars_for_completion=1
    "" don't cache completion items
    "let g:ycm_cache_omnifunc=0
    "" complete syntax keywords
    "let g:ycm_seed_identifiers_with_syntax=1
    "set nowrapscan
    " Disable Arrow keys in Escape mode
    "let g:ycm_show_diagnostics_ui = 0
    let g:ycm_complete_in_comments_and_strings=1
    let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
    let g:ycm_autoclose_preview_window_after_completion = 1

    "This assumes your kernel directory has the word 'kernel'
    let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
    hi! Visual ctermbg=023
    let g:ycm_python_binary_path='/usr/bin/python3'
    " For Neovim 0.1.3 and 0.1.4
endfunction


function DeviconsSettings()
    set encoding=UTF-8
    let g:WebDevIconsUnicodeDecorateFolderNodes=1
    let g:webdevicons_enable = 1
    let g:webdevicons_enable_nerdtree = 1
    let g:webdevicons_enable_unite = 1
    let g:webdevicons_enable_vimfiler = 1
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_airline_statusline = 1
    let g:webdevicons_enable_ctrlp = 1
    let g:webdevicons_enable_startify = 1
    let g:webdevicons_enable_flagship_statusline = 1
    let g:WebDevIconsUnicodeDecorateFileNodes = 1
    let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
    let g:webdevicons_enable_denite = 1
    " devicons settins
    if exists("g:loaded_webdevicons")
        call webdevicons#refresh()
    endif
endfunction

"FZZ options
function! CreateCenteredFloatingWindow()
    let width = min([&columns - 4, max([80, &columns - 20])])
    let height = min([&lines - 4, max([20, &lines - 10])])
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = "╭" . repeat("─", width - 2) . "╮"
    let mid = "│" . repeat(" ", width - 2) . "│"
    let bot = "╰" . repeat("─", width - 2) . "╯"
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
    set winhl=Normal:Floating
    let opts.row += 1
    let opts.height -= 2
    let opts.col += 2
    let opts.width -= 4
    call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    au BufWipeout <buffer> exe 'bw '.s:buf
endfunction
function! FZFSettings()
    let g:fzf_layout = { 'window': 'enew' }
    let g:fzf_layout = { 'window': '-tabnew' }
    let g:fzf_layout = { 'window': '10split enew' }
    let g:fzf_layout = { 'down': '~40%' }
    let g:fzf_tags_command = 'ctags -R'
    let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
    let g:fzf_layout = { 'window': 'call CreateCenteredFloatingWindow()' }
endfunction


" ============================================================================
" Put gui only settings here
" ============================================================================
if exists("g:gui_oni")
	function! OpenTerminal()
		tabnew | term
	endfunction
endif

"=============================================================================
"Installed plugin settings
"=============================================================================
function! EasyMotionSettings()
    let g:sneak#label = 1
    "Easy motion across window settings
    " <Leader>f{char} to move to {char}
    map  <Leader>F <Plug>(easymotion-bd-f)
    nmap <Leader>F <Plug>(easymotion-overwin-f)

    " s{char}{char} to move to {char}{char}
    "nmap s <Plug>(easymotion-overwin-f2)

    " Move to line
    map <Leader>L <Plug>(easymotion-bd-jk)
    nmap <Leader>L <Plug>(easymotion-overwin-line)

    " Move to word
    map  <Leader>w <Plug>(easymotion-bd-w)
    nmap <Leader>w <Plug>(easymotion-overwin-w)
    nmap s <Plug>(easymotion-s2)
    nmap t <Plug>(easymotion-t2)
    "map  / <Plug>(easymotion-sn)
    "map ? <Plug>(easymotion-tn)

    " These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
    " Without these mappings, `n` & `N` works fine. (These mappings just provide
    " different highlight method and have some other features )
    "map  n <Plug>(easymotion-next)
    "map  N <Plug>(easymotion-prev)
    let g:EasyMotion_smartcase = 1
endfunction

function! EasySearchSettings()
    let g:esearch = {
			\ 'adapter':    'ag',
			\ 'backend':    'vimproc',
			\ 'out':        'win',
			\ 'batch_size': 1000,
			\ 'use':        ['visual', 'hlsearch', 'last'],
			\}
endfunction


function AirlineSettings()
    "let g:airline_section_x=''
    "let g:airline_section_y=''
    "let g:airline_skip_empty_sections = 1
    "vim airline settings
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    "set guifont=Droid\ Sans\ Mono\ 10
    "set guifont=Roboto\ Mono\ Medium\ Italic\ for\ Powerline.ttf
    set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete.otf
    let g:airline_theme = 'atomic'
    let g:airline_powerline_font='Droid Sans Mono for Powerline.otf'
    let g:Powerline_symbols = 'fancy'
    set encoding=utf-8
    set t_Co=256
    set fillchars+=stl:\ ,stlnc:\
    set termencoding=utf-8
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'unique_tail'
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
endfunction
"Retain the cursor position across the vim sessions
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction


" Coc functions
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

function! CocEplorerSetting()
    let g:coc_explorer_global_presets = {
\   '.vim': {
\     'root-uri': '~/.vim',
\   },
\   'cocConfig': {
\      'root-uri': '~/.config/coc',
\   },
\   'tab': {
\     'position': 'tab',
\     'quit-on-open': v:true,
\   },
\   'floating': {
\     'position': 'floating',
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingTop': {
\     'position': 'floating',
\     'floating-position': 'center-top',
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingLeftside': {
\     'position': 'floating',
\     'floating-position': 'left-center',
\     'floating-width': 50,
\     'floating-hight': 80,
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingRightside': {
\     'position': 'floating',
\     'floating-position': 'right-center',
\     'floating-width': 50,
\     'open-action-strategy': 'sourceWindow',
\   },
\   'simplify': {
\     'file-child-template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
\   },
\   'buffer': {
\     'sources': [{'name': 'buffer', 'expand': v:true}]
\   },
\ }
endfunction

function! CocExtentionSetting()
    "================================================================================
    " Coc autompleter settings start
    "================================================================================
    "" Sample coc-plugin config
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Some servers have issues with backup files, see #649
    set nobackup
    set nowritebackup

    " Better display for messages
    set cmdheight=2

    " You will have bad experience for diagnostic messages when it's default 4000.
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
        " Recently vim can merge signcolumn and number column into one
        set signcolumn=number
    else
        set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <C-]> <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    " Mappings for CoCList
    " Show all diagnostics.
    " nnoremap <silent> <space><space> :<C-u>CocFzfList<CR>
    nnoremap <silent> <space>a       :<C-u>CocFzfList diagnostics<CR>
    nnoremap <silent> <space>b       :<C-u>CocFzfList diagnostics --current-buf<CR>
    nnoremap <silent> <space>c       :<C-u>CocFzfList commands<CR>
    nnoremap <silent> <space>e       :<C-u>CocFzfList extensions<CR>
    nnoremap <silent> <space>l       :<C-u>CocFzfList location<CR>
    nnoremap <silent> <space>o       :<C-u>CocFzfList outline<CR>
    nnoremap <silent> <space>s       :<C-u>CocFzfList symbols<CR>
    nnoremap <silent> <space>p       :<C-u>CocFzfListResume<CR>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :call CocActionAsync('doHover')<CR>
    " Resume latest coc list.
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    nmap <Esc> :call coc#float#close_all() <CR>

    " Use K to show documentation in preview window after entering the markdown buffer
    " default: 0
    let g:mkdp_auto_start = 1
    call CocEplorerSetting()
endfunction

"=============================================================================
"   Vim Plug plugin manager
function! PluginConfig()
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
endfunction

function! LoadPlugins()
    call PluginConfig()
    call plug#begin('~/.local/share/nvim/plugged')
    Plug 'tpope/vim-fugitive'
    Plug 'eugen0329/vim-esearch'
    Plug 'fatih/vim-go', { 'for' : ['go', 'markdown'] } "Loads only when editing golang files"
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'majutsushi/tagbar'
    Plug 'scrooloose/nerdcommenter'
    "Plug 'valloric/youcompleteme'
    Plug 'easymotion/vim-easymotion'
    Plug 'trusktr/seti.vim'
    "Plug 'jodosha/vim-godebug'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release/rpc' }
    Plug 'antoinemadec/coc-fzf'
    Plug 'mhartington/oceanic-next'
    "Plug 'wikitopian/hardmode'
    Plug 'machakann/vim-highlightedyank'
    Plug 'sebdah/vim-delve'
    Plug 'justinmk/vim-sneak'
    Plug 'radenling/vim-dispatch-neovim'
    Plug 'tpope/vim-dispatch'
    "Plug 'mhinz/vim-grepper'
    Plug 'svermeulen/vim-easyclip'
    Plug 'kshenoy/vim-signature'
    Plug 'tpope/vim-rhubarb'
    Plug 'Lokaltog/powerline'
    Plug 'ryanoasis/vim-devicons'
    "Plug 'ncm2/float-preview.nvim'
    Plug 'tpope/vim-unimpaired'
    Plug 'airblade/vim-gitgutter'
    Plug 'tomasiser/vim-code-dark'
    Plug 'chrisbra/colorizer'
    Plug 'Shougo/vimproc'
    Plug 'c9s/helper.vim'
    Plug 'c9s/treemenu.vim'
    Plug 'c9s/vikube.vim'
    "Plug 'davidhalter/jedi-vim'
    Plug 'rhysd/git-messenger.vim'
    Plug 'tommcdo/vim-fubitive'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
    Plug 'machakann/vim-sandwich'
    "Plug 'scrooloose/nerdtree'
    "Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    Plug 'Lenovsky/nuake'
    Plug 'voldikss/vim-floaterm'
    Plug 'scrooloose/vim-slumlord'
    Plug 'aklt/plantuml-syntax'
    Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }
    "Plug 'francoiscabrol/ranger.vim'
    Plug 'rbgrouleff/bclose.vim'
    Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
    Plug 'mhinz/vim-startify'
    call plug#end()            
    filetype plugin indent on   
endfunction

"================================================================================
function! AllAutoCommands()
    " autogroups/commands
    :augroup numbertoggle
    :  autocmd!
    :  autocmd BufEnter,FocusGained,InsertLeave * set nu rnu
    :  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
    :augroup END
    " traverse back git object
    autocmd User fugitive 
                \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
                \ nnoremap <buffer> .. :edit %:h<CR>|
                \ endif
    " ===== fugutive setting for close buffer once leave
    autocmd BufReadPost fugitive://* set bufhidden=delete
    set textwidth=0
    " python indenting
    au BufNewFile,BufRead *.py call SetPythonIndent()
    " fomat c and c++ file using COC plugin
    au! BufWritePost,BufEnter  *.{c,cpp,cc,h,hpp} call SetCCIndent()
    " restore line cursors
    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END

    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    set conceallevel=3
    "yaml settings
    au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    " Syntax highlight for Jenkinsfile
    au BufNewFile,BufRead Jenkinsfile setf groovy
    " hover to function def
endfunction

function AllMappings()
    "visual
    " Search patterns in visully selected texts
    " copied from http://vim.wikia.com/wiki/Search_for_visually_selected_text
    vnoremap <silent> * :<C-U>
                \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
                \gvy/<C-R><C-R>=substitute(
                \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
                \gV:call setreg('"', old_reg, old_regtype)<CR>
    vnoremap <silent> # :<C-U>
                \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
                \gvy?<C-R><C-R>=substitute(
                \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
                \gV:call setreg('"', old_reg, old_regtype)<CR>
    vnoremap // y/<C-R>"<CR>
    "visual mode text movement and keep in select
    vnoremap <S-TAB> <gv
    vnoremap <TAB> >gv
    vnoremap <C-c> "+y
    nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>
    " delete git buffer after leave
    vnoremap <silent> / :<C-U>call RangeSearch('/')<CR>:if strlen(g:srchstr) > 0\|exec '/'.g:srchstr\|endif<CR>
    vnoremap <silent> ? :<C-U>call RangeSearch('?')<CR>:if strlen(g:srchstr) > 0\|exec '?'.g:srchstr\|endif<CR>
    "map for paste in insert mode
    imap <C-v> <esc>:set paste<CR>i<C-r>*<esc>:set nopaste<CR>i
    nmap <Leader>b :Buffers<cr>
    nmap <C-p> :Files<cr>
    "nmap <Leader>o :NERDTreeToggle<cr>
    nmap <Leader>o :CocCommand explorer<cr> 
    " jk key in wrapped lines
    nmap j gj
    nmap k gk
    "" Move to the next buffer
    nmap <silent><localleader>l :bnext<CR>
    " Move to the previous buffer
    nmap <silent><localleader>h :bprevious<CR>
    nmap <silent><leader>t :TagbarToggle<CR>
    noremap <silent><Leader>m :call ToggleMouse()<cr>
    " Zoom / Restore window.
    command! ZoomToggle call s:ZoomToggle()
    command! Config execute ":e $MYVIMRC"
    command! Reload execute ":source $MYVIMRC"
    nnoremap <silent> <C-A> :ZoomToggle<CR>
    nnoremap <F4> :Nuake<CR>
    inoremap <F4> <C-\><C-n>:Nuake<CR>
    tnoremap <F4> <C-\><C-n>:Nuake<CR>
    nmap <C-b> :BLines<CR>
    nmap <C-g> :Rg!<CR>
    nmap <C-,> :Config<CR>
endfunction

function! TerminalMapings()
    tnoremap <A-h> <C-\><C-N><C-w>h
    tnoremap <A-j> <C-\><C-N><C-w>j
    tnoremap <A-k> <C-\><C-N><C-w>k
    tnoremap <A-l> <C-\><C-N><C-w>l
    inoremap <A-h> <C-\><C-N><C-w>h
    inoremap <A-j> <C-\><C-N><C-w>j
    inoremap <A-k> <C-\><C-N><C-w>k
    inoremap <A-l> <C-\><C-N><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l
endfunction
function! Main()
    call Colors()
    call LoadPlugins()
    call CocExtentionSetting()
    "call DeviconsSettings()
    call YCMSettings()
    call GitMapings()
    "call FZFSettings()
    call EasyMotionSettings()
    call EasySearchSettings()
    call VimGoPluginSettings()
    call AirlineSettings()
    call GlobalSettings()
    call AllAutoCommands()
"    call AddNerdTreeConf()
    call AllMappings()
    call TerminalMapings()
endfunction
"map leader key
let mapleader = ","
let maplocalleader = ";"
call Main()

